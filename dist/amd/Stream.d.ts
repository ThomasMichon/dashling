import Settings from './Settings';
import MetricSet from './MetricSet';
export default class Stream {
    fragments: any[];
    streamType: string;
    qualityIndex: number;
    bufferRate: MetricSet;
    private _isDisposed;
    private _events;
    private _async;
    private _startTime;
    private _appendLength;
    private _appendTimeoutId;
    private _initializedQualityIndex;
    private _initRequestManager;
    private _requestManager;
    private _mediaSource;
    private _videoElement;
    private _settings;
    private _manifest;
    private _streamInfo;
    private _buffer;
    private _hasInitializedBuffer;
    private _initSegments;
    private _isAppending;
    constructor(streamType: string, mediaSource: MediaSource, videoElement: HTMLVideoElement, settings: Settings);
    dispose(): void;
    initialize(): void;
    abortAll(): void;
    clearBuffer(): void;
    canAppend(fragmentIndex: number): boolean;
    append(fragmentIndex: number, onComplete: any): void;
    getBufferRate(): number;
    getActiveRequestCount(): number;
    getRequestStaggerTime(): number;
    isMissing(fragmentIndex: number, currentTime: number): boolean;
    isBuffered(fragmentIndex: number, currentTime: number): boolean;
    canLoad(fragmentIndex: number): boolean;
    load(fragmentIndex: number, onFragmentAvailable: () => void): void;
    assessQuality(): void;
    private _estimateDownloadSeconds(qualityIndex, fragmentIndex?);
    private _loadInitSegment(qualityIndex, onFragmentAvailable);
    private _getInitUrl(qualityIndex);
    private _getUrl(fragmentIndex, fragment);
}
